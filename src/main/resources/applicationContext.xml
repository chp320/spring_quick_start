<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.2.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
    <!-- 불필요 location 주석 처리 | https://www.springframework.org/schema/context/spring-context.xsd -->

<!--    <bean id="tv" class="polymorphism.SamsungTV" />-->
<!--    init-method, destroy-method 테스트 -->
<!--    <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" scope="singleton"/>-->

    <!-- component-scan 엘리먼트 사용으로 아래 bean 엘리먼트 항목 주석 처리 -->
<!--    <bean id="tv" class="polymorphism.SamsungTV" >-->
        <!-- constructor-arg 엘리먼트의 속성 설정, ref: 인자로 전달될 데이터가 다른 객체인 경우, value: 고정된 문자열이나 정수 같은 기본형 데이터인 경우 사용 -->
<!--        <constructor-arg ref="apple"></constructor-arg>-->
<!--        <constructor-arg value="2700000"></constructor-arg>-->
        <!-- constructor injection이 아닌 setter injection을 이용하기 위해 constructor-arg 대신 property 앨리먼트 적용한다. -->
<!--        <property name="speaker" ref="apple"/>-->
<!--        <property name="price" value="2700000"/>-->
<!--    </bean>-->
<!--
    <bean id="sony" class="polymorphism.SonySpeaker"></bean>
    <bean id="apple" class="polymorphism.AppleSpeaker"></bean>
-->

    <!-- (22.08.07) componet-scan 엘리먼트 사용
         component-scan 설정하면 스프링 설정 파일에 클래스를 일일이 bean 엘리먼트로 등록할 필요 없고, @Component 만 클래스 선언부에 설정하면 됨 -->
<!--    <context:component-scan base-package="polymorphism"/>-->
    <!-- @Autowired 로 지정한 의존대상에 의존관계 맺기 위한 bean 앨리먼트 추가 -->
<!--    <bean class="polymorphism.SonySpeaker"/>-->

    <!-- (22.08.13) Class06 실습 위한 component-scan 추가 -->
    <context:component-scan base-package="com.springbook.biz"/>

    <!-- (22.08.13) Class07 실습 : UserServiceImpl, UserDAO 클래스 bean 등록 -->
<!--    <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">-->
<!--        &lt;!&ndash; UserServiceImpl에서 UserDAO 의존성 주입을 위한 property 설정 &ndash;&gt;-->
<!--        <property name="userDAO" ref="userDAO"/>-->
<!--    </bean>-->
<!--    <bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"/>-->

    <!-- (22.08.13) DAY02, Class01 | 네임스페이스 추가 및 AOP 설정 -->
    <bean id="log" class="com.springbook.biz.common.LogAdvice"/>
    <aop:config>
        <aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
        <aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>
        <aop:aspect ref="log">
<!--            <aop:before method="printLog" pointcut-ref="allPointcut"/>-->
<!--            <aop:before method="printLog" pointcut-ref="getPointcut"/>-->
            <!-- 어드바이스 동작 시점을 비즈니스 메서드 실행 후(after) 동작하도록 수정 -->
            <aop:after method="printLog" pointcut-ref="getPointcut"/>
        </aop:aspect>
    </aop:config>

    <!-- (22.08.20) DAY02, Class 03 | 어드바이스 동작 시점 -->
    <bean id="before" class="com.springbook.biz.common.BeforeAdvice"/>
    <aop:config>
        <aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
        <aop:aspect ref="before">
            <aop:before method="beforeLog" pointcut-ref="allPointcut"/>
        </aop:aspect>
    </aop:config>

    <!-- (22.08.20) DAY02, Class 03 | after returning 어드바이스 -->
    <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"/>
    <aop:config>
        <aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>
        <aop:aspect ref="afterReturning">
            <aop:after-returning method="afterLog" pointcut-ref="getPointcut"/>
        </aop:aspect>
    </aop:config>

    <!-- (22.08.20) DAY02, Class 03 | after throwing 어드바이스 -->
    <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"/>
    <!-- (22.08.20) DAY02, Class 03 | after 어드바이스 -->
    <bean id="after" class="com.springbook.biz.common.AfterAdvice"/>
    <aop:config>
        <aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
        <aop:aspect ref="afterThrowing">
            <aop:after-throwing method="exceptionLog" pointcut-ref="allPointcut"/>
        </aop:aspect>

        <aop:aspect ref="after">
            <aop:after method="finallyLog" pointcut-ref="allPointcut"/>
        </aop:aspect>
    </aop:config>

</beans>